#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require_relative '../lib/thatsmybis_scraper'

def main
  puts "That's My BIS Tooltip Extraction Test".blue.bold
  puts "This will test extracting tooltip data from character pages".yellow
  
  # Initialize the single WebDriver instance
  driver_manager = ThatsMyBisScraper::WebDriverManager.instance
  shared_driver = driver_manager.driver
  
  begin
    # Initialize components with shared driver
    scraper = ThatsMyBisScraper::Scraper.new(driver: shared_driver)
    character_scraper = ThatsMyBisScraper::CharacterScraper.new(scraper)
    
    # Test with a sample character URL (you can change this)
    test_url = "https://thatsmybis.com/11258/chonglers/c/540876/aelektra"
    
    puts "Testing tooltip extraction for: #{test_url}".green
    
    # Scrape the character page using shared session
    character_data = character_scraper.scrape_character_page(test_url, use_persistent: true)
    
    # Display the extracted data
    puts "\n" + "="*60
    puts "CHARACTER DATA EXTRACTED".blue.bold
    puts "="*60
    puts "Name: #{character_data[:name]}".green
    puts "Class: #{character_data[:class]}".green
    puts "Level: #{character_data[:level]}".green
    puts "Race: #{character_data[:race]}".green
    puts "Professions: #{character_data[:professions].join(', ')}".green
    
    # Display wishlist data with tooltip info
    if character_data[:wishlists].any?
      puts "\nWishlists:".yellow
      character_data[:wishlists].each_with_index do |wishlist, w_index|
        puts "  #{w_index + 1}. #{wishlist[:name]}".cyan
        
        if wishlist[:items].any?
          puts "    Items:".white
          wishlist[:items].first(3).each_with_index do |item, i_index|
            puts "      #{i_index + 1}. #{item[:name]} (#{item[:quality]})".white
            puts "        Wowhead ID: #{item[:wowhead_id]}".white
            puts "        Icon: #{item[:icon_url]}" if item[:icon_url]
            puts "        Priority: #{item[:priority]}" if item[:priority]
            puts "        Difficulty: #{item[:difficulty]}" if item[:difficulty]
            puts "        Note: #{item[:note]}" if item[:note]
            
            # Display tooltip data if available
            if item[:item_level] || item[:armor] || item[:stats]
              puts "        Tooltip Data:".white
              puts "          Item Level: #{item[:item_level]}" if item[:item_level]
              puts "          Armor: #{item[:armor]}" if item[:armor]
              puts "          Required Level: #{item[:required_level]}" if item[:required_level]
              puts "          Slot: #{item[:slot]}" if item[:slot]
              puts "          Binding: #{item[:binding]}" if item[:binding]
              puts "          Classes: #{item[:classes].join(', ')}" if item[:classes]&.any?
              
              if item[:stats]&.any?
                puts "          Stats:".white
                item[:stats].each do |stat|
                  puts "            +#{stat[:value]} #{stat[:stat]}" + (stat[:percentage] ? '%' : '').to_s
                end
              end
              
              if item[:set_info]&.any?
                puts "          Set: #{item[:set_info][:name]} (#{item[:set_info][:current_pieces]}/#{item[:set_info][:total_pieces]})".white
                if item[:set_info][:bonuses]
                  item[:set_info][:bonuses].each do |bonus|
                    puts "            (#{bonus[:pieces]}) #{bonus[:bonus]}".white
                  end
                end
              end
            end
            
            puts ""
          end
          
          if wishlist[:items].length > 3
            puts "    ... and #{wishlist[:items].length - 3} more items".gray
          end
        end
      end
    end
    
    # Save the data
    output_file = "data/tooltip_test_#{Time.now.strftime('%Y%m%d_%H%M%S')}.json"
    FileUtils.mkdir_p('data') unless Dir.exist?('data')
    File.write(output_file, JSON.pretty_generate(character_data))
    puts "\nData saved to: #{output_file}".green
    
    puts "="*60
    
  rescue ThatsMyBisScraper::Error => e
    puts "Scraper Error: #{e.message}".red
    exit 1
  rescue => e
    puts "Unexpected Error: #{e.message}".red
    puts e.backtrace.first(5).join("\n").red
    exit 1
  ensure
    # Clean up the single WebDriver instance
    driver_manager.cleanup
  end
end

main if __FILE__ == $PROGRAM_NAME
